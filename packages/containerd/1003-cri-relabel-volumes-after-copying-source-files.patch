From 267bdad4dfaaf40bf09514979acab10619205d9d Mon Sep 17 00:00:00 2001
From: Ben Cressey <bcressey@amazon.com>
Date: Fri, 19 Feb 2021 22:11:12 +0000
Subject: [PATCH 1003/1003] cri: relabel volumes after copying source files

Otherwise the extended attributes from the source files will be used
instead of the expected label, which could prevent processes inside
the container from reading or writing to them.

Signed-off-by: Ben Cressey <bcressey@amazon.com>
---
 .../containerd/cri/pkg/containerd/opts/container.go  | 12 +++++++++++-
 .../containerd/cri/pkg/server/container_create.go    | 10 ++++++++--
 2 files changed, 19 insertions(+), 3 deletions(-)

diff --git a/vendor/github.com/containerd/cri/pkg/containerd/opts/container.go b/vendor/github.com/containerd/cri/pkg/containerd/opts/container.go
index fe199d5fb..4f0f32b4e 100644
--- a/vendor/github.com/containerd/cri/pkg/containerd/opts/container.go
+++ b/vendor/github.com/containerd/cri/pkg/containerd/opts/container.go
@@ -29,6 +29,8 @@ import (
 	"github.com/containerd/containerd/mount"
 	"github.com/containerd/continuity/fs"
 	"github.com/pkg/errors"
+	"github.com/opencontainers/selinux/go-selinux/label"
+	"golang.org/x/sys/unix"
 )
 
 // WithNewSnapshot wraps `containerd.WithNewSnapshot` so that if creating the
@@ -53,7 +55,7 @@ func WithNewSnapshot(id string, i containerd.Image) containerd.NewContainerOpts
 // WithVolumes copies ownership of volume in rootfs to its corresponding host path.
 // It doesn't update runtime spec.
 // The passed in map is a host path to container path map for all volumes.
-func WithVolumes(volumeMounts map[string]string) containerd.NewContainerOpts {
+func WithVolumes(volumeMounts map[string]string, mountLabel string) containerd.NewContainerOpts {
 	return func(ctx context.Context, client *containerd.Client, c *containers.Container) (err error) {
 		if c.Snapshotter == "" {
 			return errors.New("no snapshotter set for container")
@@ -99,6 +101,14 @@ func WithVolumes(volumeMounts map[string]string) containerd.NewContainerOpts {
 			if err := copyExistingContents(src, host); err != nil {
 				return errors.Wrap(err, "taking runtime copy of volume")
 			}
+
+			// Relabel the host directory after copying, since xattrs will be copied
+			// from the source and might not be correct.
+			if mountLabel != "" {
+				if err := label.Relabel(host, mountLabel, false); err != nil && err != unix.ENOTSUP {
+					return errors.Wrapf(err, "relabel %q with %q failed", host, mountLabel)
+				}
+			}
 		}
 		return nil
 	}
diff --git a/vendor/github.com/containerd/cri/pkg/server/container_create.go b/vendor/github.com/containerd/cri/pkg/server/container_create.go
index 12c068518..21e334121 100644
--- a/vendor/github.com/containerd/cri/pkg/server/container_create.go
+++ b/vendor/github.com/containerd/cri/pkg/server/container_create.go
@@ -189,7 +189,11 @@ func (c *criService) CreateContainer(ctx context.Context, r *runtime.CreateConta
 		for _, v := range volumeMounts {
 			mountMap[filepath.Clean(v.HostPath)] = v.ContainerPath
 		}
-		opts = append(opts, customopts.WithVolumes(mountMap))
+		mountLabel := ""
+		if spec.Linux != nil {
+			mountLabel = spec.Linux.MountLabel
+		}
+		opts = append(opts, customopts.WithVolumes(mountMap, mountLabel))
 	}
 	meta.ImageRef = image.ID
 	meta.StopSignal = image.ImageSpec.Config.StopSignal
@@ -292,10 +296,12 @@ func (c *criService) volumeMounts(containerRootDir string, criMounts []*runtime.
 		volumeID := util.GenerateID()
 		src := filepath.Join(containerRootDir, "volumes", volumeID)
 		// addOCIBindMounts will create these volumes.
+		// The volume should not be relabeled yet, since any labels will be overwritten when
+		// the contents are copied from the source.
 		mounts = append(mounts, &runtime.Mount{
 			ContainerPath:  dst,
 			HostPath:       src,
-			SelinuxRelabel: true,
+			SelinuxRelabel: false,
 		})
 	}
 	return mounts
-- 
2.26.2

